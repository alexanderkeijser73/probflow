.. _example_gan:

Generative Adversarial Network
==============================

.. include:: macros.hrst

ProbFlow isn't really built for the kind of flexibility you need to fit a GAN,
so I wouldn't recommend fitting GANs with ProbFlow.
That said, you *can* do it.  So... Just for fun...

TODO: description... 

TODO: math

TODO: diagram

TODO: note that this treats it as a generative model (ie only y no x)

TODO: talk about overriding the ``Model.log_likelihood`` method to compute the 
log likelihood due to the batch of acual data *and* a batch of the same size
of data generated by the generator network.


.. code-block:: python3

    import probflow as pf

    class BayesianGAN(pf.Model):

        def __init__(self, g_dims, d_dims):
            self.Dz = g_dims[0]
            self.generator = pf.DenseNetwork(g_dims)
            self.discriminator = pf.DenseNetwork(d_dims)

        def __call__(self, x):
            return pf.Bernoulli(self.discriminator(x))

        def log_likelihood(self, _, x):

            # Generator network generates samples
            z = tf.random.normal([x.shape[0], self.Dz])
            g = self.generator(z)

            # Combine true + generated samples
            x_all = tf.concat([x, g], axis=0)
            y_all = tf.concat([tf.ones([x.shape[0], 1]),
                               tf.zeros([x.shape[0], 1])], axis=0)

            # Discriminator network classifies true from fake
            preds = self(x_all)

            # Return sum of log probs of predictions
            return tf.reduce_sum(preds.log_prob(y_all))

